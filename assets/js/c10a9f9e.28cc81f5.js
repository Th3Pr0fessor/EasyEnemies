"use strict";(self.webpackChunkeasy_enemies=self.webpackChunkeasy_enemies||[]).push([[423],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(a),d=r,k=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return a?n.createElement(k,l(l({ref:t},u),{},{components:a})):n.createElement(k,l({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},7074:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return m}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],o={sidebar_position:1},s="Enemy API",c={unversionedId:"tutorial-extras/enemy-api",id:"tutorial-extras/enemy-api",title:"Enemy API",description:"As seen in Getting Started there are many settings you can tinker with.",source:"@site/docs/tutorial-extras/enemy-api.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/enemy-api",permalink:"/EasyEnemies/docs/tutorial-extras/enemy-api",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-extras/enemy-api.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/EasyEnemies/docs/tutorial-basics/start"},next:{title:"EasyEnemies Settings",permalink:"/EasyEnemies/docs/module-settings"}},u={},m=[{value:"General Overview",id:"general-overview",level:3},{value:"General Settings",id:"general-settings",level:2},{value:"Health",id:"health",level:3},{value:"Damage",id:"damage",level:3},{value:"Wander",id:"wander",level:3},{value:"Attack Settings",id:"attack-settings",level:2},{value:"Attack Range",id:"attack-range",level:3},{value:"Attack Radius",id:"attack-radius",level:3},{value:"Attack Ally",id:"attack-ally",level:3},{value:"Attack Npcs",id:"attack-npcs",level:3},{value:"Attack Players",id:"attack-players",level:3},{value:"Animations &amp; Effects",id:"animations--effects",level:2},{value:"default attacks",id:"default-attacks",level:3}],p={toc:m};function d(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"enemy-api"},"Enemy API"),(0,i.kt)("p",null,"As seen in ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/docs/tutorial-basics/start"},"Getting Started"))," there are many settings you can tinker with."),(0,i.kt)("h3",{id:"general-overview"},"General Overview"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"\n-- Defining Enemy Settings\n\nlocal enemy_settings = {\n    health = 100, -- Enemy Health\n    damage = 1, -- Enemy Base Damage\n    wander = false, -- Enemy Wandering\n\n    attack_range = 20, -- Enemy Search Radius\n    attack_radius = 5, -- Enemy Attack Radius\n\n    attack_ally = false, -- Enemy Attacking Team Members\n    attack_npcs = true, -- Enemy Attacking Random NPC's\n    attack_players = true, -- Enemy Attacking Players\n\n    default_animations = {8972576500}, -- Enemy Animations should be used for 'Light' Attacks // Example default_animations = {8972576500}\n    default_functions = { -- Functions for said 'Light' Attacks ^\n        function(target) -- functions pass the target as the first argument automatically\n            print(target)\n        end,\n    },\n\n    special_animations = {8972576500}, -- Enemy Animations should be used for 'Heavy' Attacks // Example special_animations = {8972576500}\n    special_functions = { -- Functions for said 'Heavy' Attacks ^\n        function(target) -- functions pass the target as the first argument automatically\n            print('specialMove')\n        end,\n    },\n}\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"general-settings"},"General Settings"),(0,i.kt)("h3",{id:"health"},"Health"),(0,i.kt)("p",null,"Changes the initial health to setting's value."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"health = 100, -- Enemy Health"))),(0,i.kt)("h3",{id:"damage"},"Damage"),(0,i.kt)("p",null,"Creates damage set to the setting's value."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"damage = 1, -- Enemy Base Damage"))),(0,i.kt)("h3",{id:"wander"},"Wander"),(0,i.kt)("p",null,"If set to true enemy will walk around freely withing the attack_range"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"wander = false, -- Enemy Wandering"))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"attack-settings"},"Attack Settings"),(0,i.kt)("h3",{id:"attack-range"},"Attack Range"),(0,i.kt)("p",null,"The search radius of initialized enemy"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"attack_range = 20, -- Enemy Search Radius"))),(0,i.kt)("h3",{id:"attack-radius"},"Attack Radius"),(0,i.kt)("p",null,"The maximum distance of the enemy target can be in order for an enemy to attack"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"attack_radius = 5, -- Enemy Attack Radius"))),(0,i.kt)("h3",{id:"attack-ally"},"Attack Ally"),(0,i.kt)("p",null,"Enemy will attack Humanoid Model with the same tag as itself"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"attack_ally = false, -- Enemy Attacking Team Members"))),(0,i.kt)("h3",{id:"attack-npcs"},"Attack Npcs"),(0,i.kt)("p",null,"Enemy will attack Humanoid Model that does not possess the same tags nor is a player"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"attack_npcs = true, -- Enemy Attacking Random NPC's"))),(0,i.kt)("h3",{id:"attack-players"},"Attack Players"),(0,i.kt)("p",null,"Enemy will attack players"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"attack_players = true, -- Enemy Attacking Players"))),(0,i.kt)("h2",{id:"animations--effects"},"Animations & Effects"),(0,i.kt)("p",null,"Here we will encompass ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"special")," into 2 bullet points"),(0,i.kt)("h3",{id:"default-attacks"},"default attacks"),(0,i.kt)("p",null,"Default animations should be companied by functions, the index of the animation matches up with the index of the function, lets take the following code for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"default_animations = {8972576500, 9039173175}, -- Enemy Animations should be used for 'Light' Attacks // Example default_animations = {8972576500}\ndefault_functions = { -- Functions for said 'Light' Attacks ^\n    function(target) -- functions pass the target as the first argument automatically\n        print('move 1')\n    end,\n\n    function(target) -- functions pass the target as the first argument automatically\n        print('move 2')\n    end,\n}\n")),(0,i.kt)("p",null,"if the animation ",(0,i.kt)("inlineCode",{parentName:"p"},"8972576500")," ",(0,i.kt)("em",{parentName:"p"},"(default_animations","[2]",")")," at the index of 2 plays the following function will be called:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"function(target) -- functions pass the target as the first argument automatically\n    print('move 2')\nend\n")))}d.isMDXComponent=!0}}]);